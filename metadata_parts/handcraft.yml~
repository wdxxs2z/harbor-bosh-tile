label: Harbor Registry Service
description: harbor service
icon_image: 
minimum_version_for_upgrade: 0.1.0
rank: 50
form_types:
- name: Harbor Configration
  label: Harbor Configration
  description: harbor config
  property_inputs:
  - reference: ".properties.harbor_external_url"
    label: harbor external url
    description: 'harbor external url such as: http://harbor-registry.domain.io:80'
  - reference: ".properties.mysql_harbor_password"
    label: harbor mysql password
    description: 'harbor mysql password'
  - reference: ".properties.harbor_adminservice_key"
    label: harbor admin server key
    description: 'harbor admin server key,such as:hespc2wZyu2wIHS'
  - reference: ".properties.harbor_self_registration"
    label: harbor self registration
    description: 'harbor admin server key,default true.'
  - reference: ".properties.harbor_project_creation_restriction"
    label: harbor project creation restriction
    description: 'harbor admin server key,default everyone.'
  - reference: ".properties.harbor_ssl_rsa_certificate"
    label: harbor certificate
    description: harbor self cert_pem
  - reference: ".properties.harbor_init_sql"
    label: harbor sql content
    description: harbor sql content
- name: UAA Configration
  label: UAA Configration(Not Ready)
  description: uaa config
  property_inputs:
  - reference: ".properties.auth_mode"
    label: auth mode
    description: auth mode select
  - reference: ".properties.uaa_endpoint_url"
    label: uaa endpoint url
    description: The uaa endpoint URL (e.g. https://uaa.mydomain.com)
  - reference: ".properties.uaa_client_id"
    label: uaa client id
    description: uaa client id
  - reference: ".properties.uaa_client_secret"
    label: uaa client secret
    description: The uaa client secret
- name: LDAP Configration
  label: LDAP Configration
  description: ldap config
  property_inputs:
  - reference: ".properties.ldap_url"
    label: ldap endpoint url
    description: The LDAP endpoint URL (e.g. ldaps://ldap.mydomain.com)
  - reference: ".properties.ldap_search_dn"
    label: ldap search dn
    description: The DN of a user who has the permission to search an LDAP/AD server
      (e.g. uid=admin,ou=people,dc=mydomain,dc=com)
  - reference: ".properties.ldap_search_pwd"
    label: ldap search pwd
    description: The password of the user specified by search_dn
  - reference: ".properties.ldap_base_dn"
    label: ldap base dn
    description: The base DN to look up a user, e.g. ou=people,dc=mydomain,dc=com
  - reference: ".properties.ldap_filter"
    label: ldap filter
    description: The search filter for looking up a user, e.g. (objectClass=person)
  - reference: ".properties.ldap_uid"
    label: ldap uid
    description: The attribute used to match a user during a LDAP search, it could
      be uid, cn, email or other attributes
  - reference: ".properties.ldap_scope"
    label: ldap scope
    description: The scope to search for a user, 1-LDAP_SCOPE_BASE, 2-LDAP_SCOPE_ONELEVEL,
      3-LDAP_SCOPE_SUBTREE. Default is 3
  - reference: ".properties.ldap_timeout"
    label: ldap timeout
    description: The LDAP timeout
- name: Email Configration
  label: Email Configration
  description: Email config
  property_inputs:
  - reference: ".properties.ldap_email_server"
    label: ldap email server
    description: SMTP server
  - reference: ".properties.ldap_email_port"
    label: ldap email port
    description: SMTP server port
  - reference: ".properties.ldap_email_username"
    label: ldap email username
    description: SMTP server username
  - reference: ".properties.ldap_email_password"
    label: ldap email password
    description: SMTP server password
  - reference: ".properties.ldap_email_ssl"
    label: ldap email ssl
    description: Tf your SMTP server requires SSL, but does not support STARTTLS,
      then you should set this property to true
  - reference: ".properties.ldap_email_from"
    label: ldap email from
    description: SMTP From address
job_types:
- name: mysql
  label: mysql
  resource_label: mysql
  description: mysql
  templates:
  - name: mysql
    release: cf-mysql
  max_in_flight: 1
  dynamic_ip: 0
  static_ip: 1
  single_az_only: true
  instance_definition:
    name: instances
    type: integer
    default: 1
    configurable: true
    constraints:
      min: 0
      max: 6
  resource_definitions:
  - name: ram
    label: RAM
    type: integer
    configurable: true
    default: 4096
    constraints:
      min: 1024
  - name: ephemeral_disk
    type: integer
    label: Ephemeral Disk
    configurable: true
    default: 1024
  - name: persistent_disk
    type: integer
    label: Persistent Disk
    configurable: true
    default: 16384
    constraints:
      min: 4096
  - name: cpu
    type: integer
    label: CPU
    configurable: true
    default: 2
    constraints:
      min: 1
      power_of_two: true
  property_blueprints:
  - name: vm_credentials
    type: salted_credentials
    label: VM credentials
    default:
      identity: vcap
  - name: cf_mysql_admin_credentials
    type: simple_credentials
    label: mysql admin credential
    configurable: false
    default:
      identity: admin
  - name: cf_mysql_cluster_health_credentials
    type: simple_credentials
    label: mysql cluster health credential
    configurable: false
    default:
      identity: admin
  - name: cf_mysql_galera_healthcheck_db_credentials
    type: simple_credentials
    label: mysql galera healthcheck db credential
    configurable: false
    default:
      identity: admin
  - name: cf_mysql_galera_healthcheck_endpoint_credentials
    type: simple_credentials
    label: mysql galera healthcheck endpoint credential
    configurable: false
    default:
      identity: admin
  manifest: |
    cf_mysql:
      mysql:
        admin_password: (( cf_mysql_admin_credentials.password ))
        cluster_health:
          password: (( cf_mysql_cluster_health_credentials.password ))
        galera_healthcheck:
          db_password: (( cf_mysql_galera_healthcheck_db_credentials.password ))
          endpoint_password: (( cf_mysql_galera_healthcheck_endpoint_credentials.password ))
        seeded_databases:
        - name: registry
          username: harbor
          password: (( .properties.mysql_harbor_password.value ))
- name: registry
  label: registry
  resource_label: registry
  description: docker registry
  templates:
  - consumes: |
      auth_token: {from: auth_token}
      notification: {from: notification}
      health_http: nil
      health_tcp: {from: health_tcp}
    name: registry
    release: docker-registry
  max_in_flight: 1
  dynamic_ip: 0
  static_ip: 1
  single_az_only: true
  instance_definition:
    name: instances
    type: integer
    default: 1
    configurable: true
    constraints:
      min: 0
      max: 6
  resource_definitions:
  - name: ram
    label: RAM
    type: integer
    configurable: true
    default: 4096
    constraints:
      min: 1024
  - name: ephemeral_disk
    type: integer
    label: Ephemeral Disk
    configurable: true
    default: 1024
  - name: persistent_disk
    type: integer
    label: Persistent Disk
    configurable: true
    default: 16384
    constraints:
      min: 4096
  - name: cpu
    type: integer
    label: CPU
    configurable: true
    default: 2
    constraints:
      min: 1
      power_of_two: true
  property_blueprints:
  - name: vm_credentials
    type: salted_credentials
    label: VM credentials
    default:
      identity: vcap
  - name: docker_registry_auth_credentials
    type: simple_credentials
    label: docker registry auth credential
    configurable: false
    default:
      identity: admin
  - name: docker_registry_http_credentials
    type: simple_credentials
    label: docker registry http credential
    configurable: false
    default:
      identity: admin
  manifest: |
    storage:
      driver: filesystem
      delete:
        enabled: true
    auth:
      token:
        schema: http
        port: 80
        path: /service/token
        service: harbor-registry
        issuer: harbor-token-issuer
        rootcertbundle: (( .properties.harbor_ssl_rsa_certificate.cert_pem ))
    http:
      listen_addr: 0.0.0.0
      secret: (( docker_registry_http_credentials.password))
      headers:
        X-Content-Type-Options: [nosniff]
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
      tcp:
        port: 80
    notifications:
      endpoint:
        name: harbor
        schema: http
        port: 80
        path: /service/notifications
- name: harbor
  label: harbor
  resource_label: harbor
  description: harbor
  templates:
  - name: load_datasource
    release: load-datasource
  - name: adminserver
    release: harbor
  - name: jobservice
    release: harbor
  - name: ui
    release: harbor
  max_in_flight: 1
  dynamic_ip: 0
  static_ip: 1
  single_az_only: true
  instance_definition:
    name: instances
    type: integer
    default: 1
    configurable: true
    constraints:
      min: 0
      max: 9
  resource_definitions:
  - name: ram
    label: RAM
    type: integer
    configurable: true
    default: 8192
    constraints:
      min: 1024
  - name: ephemeral_disk
    type: integer
    label: Ephemeral Disk
    configurable: true
    default: 1024
  - name: persistent_disk
    type: integer
    label: Persistent Disk
    configurable: true
    default: 16384
    constraints:
      min: 4096
  - name: cpu
    type: integer
    label: CPU
    configurable: true
    default: 2
    constraints:
      min: 1
      power_of_two: true
  property_blueprints:
  - name: vm_credentials
    type: salted_credentials
    label: VM credentials
    default:
      identity: vcap
  - name: harbor_initial_admin_credentials
    type: simple_credentials
    label: harbor initial admin credential
    configurable: false
    default:
      identity: admin
  - name: harbor_jobservice_secret
    type: simple_credentials
    label: harbor initial jobservice secret
    configurable: false
    default:
      identity: jobservice
  - name: harbor_ui_secret
    type: simple_credentials
    label: harbor initial ui secret
    configurable: false
    default:
      identity: ui
  manifest: |
    load_datasource:
      driver_class_name: com.mysql.jdbc.Driver
      driver_name: mysql
      database_hostname: (( .mysql.first_ip ))
      database_port: 3306
      database_name: registry
      database_username: harbor
      database_password: (( .properties.mysql_harbor_password.value ))
      sql: "(( .properties.harbor_init_sql.value ))"
    adminserver:
      port: 8080
      key: (( .properties.harbor_adminservice_key.value ))
      auth_mode: (( .properties.auth_mode.value ))
      token_expiration: 1440
      verify_remote_cert: false
      external_url: (( .properties.harbor_external_url.value ))
      initial_admin_password: (( harbor_initial_admin_credentials.password ))
      reset: true
      self_registration: (( .properties.harbor_self_registration.value ))
      project_creation_restriction: (( .properties.harbor_project_creation_restriction.value ))
      uaa_endpoint_url: (( .properties.uaa_endpoint_url.value ))
      uaa_client_id: (( .properties.uaa_client_id.value ))
      uaa_client_secret: (( .properties.uaa_client_secret.value ))
    jobservice:
      port: 8081
      secret: (( harbor_jobservice_secret.password ))
    ui:
      port: 8082
      secret: (( harbor_ui_secret.password ))
      private_key: (( .properties.harbor_ssl_rsa_certificate.private_key_pem ))
      uaa_ca_cert: (( $ops_manager.ca_certificate ))
    mysql:
      username: harbor
      password: (( .properties.mysql_harbor_password.value ))
      port: 3306
      dbname: registry
    ldap:
      url: (( .properties.ldap_url.value ))
      search_dn: (( .properties.ldap_search_dn.value ))
      search_pwd: (( .properties.ldap_search_pwd.value ))
      base_dn: (( .properties.ldap_base_dn.value ))
      filter: (( .properties.ldap_filter.value ))
      uid: (( .properties.ldap_uid.value ))
      scope: (( .properties.ldap_scope.value ))
      timeout: (( .properties.ldap_timeout.value ))
    email:
      server: (( .properties.ldap_email_server.value ))
      port: (( .properties.ldap_email_port.value ))
      username: (( .properties.ldap_email_username.value ))
      password: (( .properties.ldap_email_password.value ))
      ssl: (( .properties.ldap_email_ssl.value ))
      from: (( .properties.ldap_email_from.value ))
- name: nginx
  label: nginx
  resource_label: nginx
  description: nginx
  templates:
  - name: nginx
    release: harbor
  max_in_flight: 1
  dynamic_ip: 0
  static_ip: 1
  single_az_only: true
  instance_definition:
    name: instances
    type: integer
    default: 1
    configurable: true
    constraints:
      min: 0
      max: 9
  resource_definitions:
  - name: ram
    label: RAM
    type: integer
    configurable: true
    default: 8192
    constraints:
      min: 1024
  - name: ephemeral_disk
    type: integer
    label: Ephemeral Disk
    configurable: true
    default: 1024
  - name: persistent_disk
    type: integer
    label: Persistent Disk
    configurable: true
    default: 16384
    constraints:
      min: 4096
  - name: cpu
    type: integer
    label: CPU
    configurable: true
    default: 2
    constraints:
      min: 1
      power_of_two: true
  property_blueprints:
  - name: vm_credentials
    type: salted_credentials
    label: VM credentials
    default:
      identity: vcap
  manifest: |
    ssl_cert: (( .properties.harbor_ssl_rsa_certificate.cert_pem ))
    ssl_key: (( .properties.harbor_ssl_rsa_certificate.private_key_pem ))
property_blueprints:
- name: harbor_ssl_rsa_certificate
  configurable: true
  type: rsa_cert_credentials
- name: mysql_harbor_password
  type: secret
  configurable: true
- name: harbor_adminservice_key
  type: secret
  configurable: true
- name: harbor_external_url
  type: string
  configurable: true
- name: harbor_self_registration
  type: boolean
  configurable: true
  default: true
- name: harbor_project_creation_restriction
  type: dropdown_select
  default: everyone
  configurable: true
  optional: false
  options:
  - label: everyone
    name: everyone
  - label: adminonly
    name: adminonly
- name: ldap_url
  type: string
  optional: true
  configurable: true
- name: ldap_search_dn
  type: string
  optional: true
  configurable: true
- name: ldap_search_pwd
  type: string
  optional: true
  configurable: true
- name: ldap_base_dn
  type: string
  optional: true
  configurable: true
- name: ldap_filter
  type: string
  optional: true
  configurable: true
- name: ldap_uid
  type: string
  optional: true
  configurable: true
- name: ldap_scope
  type: string
  optional: true
  configurable: true
- name: ldap_timeout
  type: string
  optional: true
  configurable: true
- name: ldap_email_server
  type: string
  optional: true
  configurable: true
- name: ldap_email_port
  type: string
  optional: true
  configurable: true
- name: ldap_email_username
  type: string
  optional: true
  configurable: true
- name: ldap_email_password
  type: string
  optional: true
  configurable: true
- name: ldap_email_ssl
  type: boolean
  default: false
  configurable: true
- name: ldap_email_from
  type: string
  optional: true
  configurable: true
- name: auth_mode
  type: dropdown_select
  default: db_auth 
  configurable: true
  optional: false
  options:
  - label: db_auth
    name: db_auth
  - label: uaa_auth
    name: uaa_auth
- name: uaa_endpoint_url
  type: string
  default: https://uaa.domain.io
  configurable: true
- name: uaa_client_id
  type: string
  default: cf
  configurable: true
- name: uaa_client_secret
  type: secret
  default: ""
  configurable: true
- name: harbor_init_sql
  type: string
  default: "drop database if exists registry; create database registry charset = utf8; use registry; create table access ( access_id int NOT NULL AUTO_INCREMENT, access_code char(1), comment varchar (30), primary key (access_id) ); insert into access (access_code, comment) values ('M', 'Management access for project'), ('R', 'Read access for project'), ('W', 'Write access for project'), ('D', 'Delete access for project'), ('S', 'Search access for project'); create table role ( role_id int NOT NULL AUTO_INCREMENT, role_mask int DEFAULT 0 NOT NULL, role_code varchar(20), name varchar (20), primary key (role_id) ); insert into role (role_code, name) values ('MDRWS', 'projectAdmin'), ('RWS', 'developer'), ('RS', 'guest'); create table user ( user_id int NOT NULL AUTO_INCREMENT, username varchar(255), email varchar(255), password varchar(40) NOT NULL, realname varchar (255) NOT NULL, comment varchar (30), deleted tinyint (1) DEFAULT 0 NOT NULL, reset_uuid varchar(40) DEFAULT NULL, salt varchar(40) DEFAULT NULL, sysadmin_flag tinyint (1), creation_time timestamp, update_time timestamp, primary key (user_id), UNIQUE (username), UNIQUE (email) ); insert into user (username, email, password, realname, comment, deleted, sysadmin_flag, creation_time, update_time) values ('admin', 'admin@example.com', '', 'system admin', 'admin user',0, 1, NOW(), NOW()), ('anonymous', 'anonymous@example.com', '', 'anonymous user', 'anonymous user', 1, 0, NOW(), NOW()); create table project ( project_id int NOT NULL AUTO_INCREMENT, owner_id int NOT NULL, name varchar (41) NOT NULL, creation_time timestamp, update_time timestamp, deleted tinyint (1) DEFAULT 0 NOT NULL, public tinyint (1) DEFAULT 0 NOT NULL, primary key (project_id), FOREIGN KEY (owner_id) REFERENCES user(user_id), UNIQUE (name) ); insert into project (owner_id, name, creation_time, update_time, public) values (1, 'library', NOW(), NOW(), 1); create table project_member ( project_id int NOT NULL, user_id int NOT NULL, role int NOT NULL, creation_time timestamp, update_time timestamp, PRIMARY KEY (project_id, user_id), FOREIGN KEY (role) REFERENCES role(role_id), FOREIGN KEY (project_id) REFERENCES project(project_id), FOREIGN KEY (user_id) REFERENCES user(user_id) ); insert into project_member (project_id, user_id, role, creation_time, update_time) values (1, 1, 1, NOW(), NOW()); create table access_log ( log_id int NOT NULL AUTO_INCREMENT, username varchar (255) NOT NULL, project_id int NOT NULL, repo_name varchar (256), repo_tag varchar (128), GUID varchar(64), operation varchar(20) NOT NULL, op_time timestamp, primary key (log_id), INDEX pid_optime (project_id, op_time) ); create table repository ( repository_id int NOT NULL AUTO_INCREMENT, name varchar(255) NOT NULL, project_id int NOT NULL, description text, pull_count int DEFAULT 0 NOT NULL, star_count int DEFAULT 0 NOT NULL, creation_time timestamp default CURRENT_TIMESTAMP, update_time timestamp default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP, primary key (repository_id), UNIQUE (name) ); create table replication_policy ( id int NOT NULL AUTO_INCREMENT, name varchar(256), project_id int NOT NULL, target_id int NOT NULL, enabled tinyint(1) NOT NULL DEFAULT 1, description text, deleted tinyint (1) DEFAULT 0 NOT NULL, cron_str varchar(256), start_time timestamp NULL, creation_time timestamp default CURRENT_TIMESTAMP, update_time timestamp default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP, PRIMARY KEY (id) ); create table replication_target ( id int NOT NULL AUTO_INCREMENT, name varchar(64), url varchar(64), username varchar(255), password varchar(128), target_type tinyint(1) NOT NULL DEFAULT 0, creation_time timestamp default CURRENT_TIMESTAMP, update_time timestamp default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP, PRIMARY KEY (id) ); create table replication_job ( id int NOT NULL AUTO_INCREMENT, status varchar(64) NOT NULL, policy_id int NOT NULL, repository varchar(256) NOT NULL, operation varchar(64) NOT NULL, tags varchar(16384), creation_time timestamp default CURRENT_TIMESTAMP, update_time timestamp default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP, PRIMARY KEY (id), INDEX policy (policy_id), INDEX poid_uptime (policy_id, update_time) ); create table img_scan_job ( id int NOT NULL AUTO_INCREMENT, status varchar(64) NOT NULL, repository varchar(256) NOT NULL, tag varchar(128) NOT NULL, digest varchar(128), creation_time timestamp default CURRENT_TIMESTAMP, update_time timestamp default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP, PRIMARY KEY (id) ); create table img_scan_overview ( id int NOT NULL AUTO_INCREMENT, image_digest varchar(128) NOT NULL, scan_job_id int NOT NULL, severity int NOT NULL default 0, components_overview varchar(2048), details_key varchar(128), creation_time timestamp default CURRENT_TIMESTAMP, update_time timestamp default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP, PRIMARY KEY(id), UNIQUE(image_digest) ); create table clair_vuln_timestamp ( id int NOT NULL AUTO_INCREMENT, namespace varchar(128) NOT NULL, last_update timestamp NOT NULL, PRIMARY KEY(id), UNIQUE(namespace) ); create table properties ( k varchar(64) NOT NULL, v varchar(128) NOT NULL, primary key (k) ); CREATE TABLE IF NOT EXISTS `alembic_version` ( `version_num` varchar(32) NOT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8; insert into alembic_version values ('1.2.0');"
  configurable: true
